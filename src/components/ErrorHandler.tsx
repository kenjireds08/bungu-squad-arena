import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { 
  AlertTriangle, 
  RefreshCw, 
  Wifi, 
  WifiOff, 
  Server, 
  Home,
  MessageCircle,
  ArrowLeft
} from 'lucide-react';

interface ErrorHandlerProps {
  error: {
    type: 'network' | 'server' | 'timeout' | 'unknown';
    message: string;
    details?: string;
    statusCode?: number;
  };
  onRetry?: () => void;
  onGoHome?: () => void;
  onGoBack?: () => void;
  showContactSupport?: boolean;
}

// Mock image for „ÅÆ„ÇäÁç£‰∫∫ character
const glueCharacterImage = "/src/assets/glue.png"; // This would be the actual character image

export const ErrorHandler = ({ 
  error, 
  onRetry, 
  onGoHome, 
  onGoBack,
  showContactSupport = true 
}: ErrorHandlerProps) => {
  const [isRetrying, setIsRetrying] = useState(false);

  const getErrorIcon = () => {
    switch (error.type) {
      case 'network':
        return <WifiOff className="h-12 w-12 text-destructive" />;
      case 'server':
        return <Server className="h-12 w-12 text-destructive" />;
      case 'timeout':
        return <RefreshCw className="h-12 w-12 text-warning" />;
      default:
        return <AlertTriangle className="h-12 w-12 text-destructive" />;
    }
  };

  const getErrorTitle = () => {
    switch (error.type) {
      case 'network':
        return '„Ç§„É≥„Çø„Éº„Éç„ÉÉ„ÉàÊé•Á∂ö„Ç®„É©„Éº';
      case 'server':
        return '„Çµ„Éº„Éê„Éº„Ç®„É©„Éº';
      case 'timeout':
        return 'Êé•Á∂ö„Çø„Ç§„É†„Ç¢„Ç¶„Éà';
      default:
        return '„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åü';
    }
  };

  const getErrorDescription = () => {
    switch (error.type) {
      case 'network':
        return '„Ç§„É≥„Çø„Éº„Éç„ÉÉ„ÉàÊé•Á∂ö„ÇíÁ¢∫Ë™ç„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇWi-Fi„Åæ„Åü„ÅØ„É¢„Éê„Ç§„É´„Éá„Éº„Çø„ÅÆÊé•Á∂öÁä∂Ê≥Å„Çí„ÅîÁ¢∫Ë™ç„Åè„Å†„Åï„ÅÑ„ÄÇ';
      case 'server':
        return '„Çµ„Éº„Éê„Éº„Å´‰∏ÄÊôÇÁöÑ„Å™ÂïèÈ°å„ÅåÁô∫Áîü„Åó„Å¶„ÅÑ„Åæ„Åô„ÄÇ„Åó„Å∞„Çâ„ÅèÂæÖ„Å£„Å¶„Åã„ÇâÂÜçÂ∫¶„ÅäË©¶„Åó„Åè„Å†„Åï„ÅÑ„ÄÇ';
      case 'timeout':
        return 'Êé•Á∂ö„Åå„Çø„Ç§„É†„Ç¢„Ç¶„Éà„Åó„Åæ„Åó„Åü„ÄÇ„Éç„ÉÉ„Éà„ÉØ„Éº„ÇØÁä∂Ê≥Å„Åå‰∏çÂÆâÂÆö„Å™ÂèØËÉΩÊÄß„Åå„ÅÇ„Çä„Åæ„Åô„ÄÇ';
      default:
        return '‰∫àÊúü„Åó„Å™„ÅÑ„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åü„ÄÇ„ÅäÊâãÊï∞„Åß„Åô„Åå„ÄÅÂÜçÂ∫¶„ÅäË©¶„Åó„Åè„Å†„Åï„ÅÑ„ÄÇ';
    }
  };

  const getSolutionSteps = () => {
    switch (error.type) {
      case 'network':
        return [
          'Wi-FiÊé•Á∂ö„ÇíÁ¢∫Ë™ç„Åô„Çã',
          '„É¢„Éê„Ç§„É´„Éá„Éº„Çø„ÇíON/OFF„Åô„Çã',
          'Ê©üÂÜÖ„É¢„Éº„Éâ„Çí‰∏ÄÂ∫¶ON„Å´„Åó„Å¶„Åã„ÇâOFF„Å´„Åô„Çã',
          'Âà•„ÅÆ„Éç„ÉÉ„Éà„ÉØ„Éº„ÇØ„Å´Êé•Á∂ö„Åó„Å¶„Åø„Çã'
        ];
      case 'server':
        return [
          'Êï∞ÂàÜÂæÖ„Å£„Å¶„Åã„ÇâÂÜçË©¶Ë°å„Åô„Çã',
          '„Ç¢„Éó„É™„Çí‰∏ÄÂ∫¶Èñâ„Åò„Å¶ÂÜçËµ∑Âãï„Åô„Çã',
          '„Éá„Éê„Ç§„Çπ„ÇíÂÜçËµ∑Âãï„Åô„Çã'
        ];
      case 'timeout':
        return [
          '„Éç„ÉÉ„Éà„ÉØ„Éº„ÇØÊé•Á∂ö„ÇíÁ¢∫Ë™ç„Åô„Çã',
          'Ê∑∑Èõë„Åó„Å¶„ÅÑ„Å™„ÅÑÊôÇÈñì„Å´ÂÜçË©¶Ë°å„Åô„Çã',
          '„Ç≠„É£„ÉÉ„Ç∑„É•„Çí„ÇØ„É™„Ç¢„Åó„Å¶„Åø„Çã'
        ];
      default:
        return [
          '„Éö„Éº„Ç∏„ÇíÂÜçË™≠„ÅøËæº„Åø„Åô„Çã',
          '„Ç¢„Éó„É™„ÇíÂÜçËµ∑Âãï„Åô„Çã',
          '„Éá„Éê„Ç§„Çπ„ÇíÂÜçËµ∑Âãï„Åô„Çã'
        ];
    }
  };

  const handleRetry = async () => {
    if (!onRetry) return;
    
    setIsRetrying(true);
    try {
      await onRetry();
    } catch (err) {
      console.error('Retry failed:', err);
    } finally {
      setIsRetrying(false);
    }
  };

  return (
    <div className="min-h-screen bg-gradient-parchment flex items-center justify-center p-4">
      <div className="w-full max-w-2xl space-y-6">
        {/* Character and Error Icon */}
        <div className="text-center space-y-4">
          <div className="relative inline-block">
            {/* „ÅÆ„ÇäÁç£‰∫∫ Character */}
            <div className="w-32 h-32 mx-auto bg-muted/30 rounded-full flex items-center justify-center mb-4">
              <div className="text-6xl opacity-60">ü¶å</div> {/* Placeholder for glue character */}
            </div>
            {/* Error overlay icon */}
            <div className="absolute -bottom-2 -right-2">
              {getErrorIcon()}
            </div>
          </div>
          
          <div className="space-y-2">
            <h1 className="text-2xl font-bold text-foreground">
              {getErrorTitle()}
            </h1>
            <p className="text-muted-foreground">
              „ÅÆ„ÇäÁç£‰∫∫„Åã„Çâ„ÅÆ„ÅäÁü•„Çâ„Åõ„Åß„Åô
            </p>
          </div>
        </div>

        {/* Error Details */}
        <Card className="border-fantasy-frame shadow-soft">
          <CardHeader className="pb-3">
            <CardTitle className="flex items-center gap-2">
              <AlertTriangle className="h-5 w-5 text-destructive" />
              „Ç®„É©„Éº„ÅÆË©≥Á¥∞
            </CardTitle>
          </CardHeader>
          <CardContent className="space-y-4">
            <div className="space-y-2">
              <p className="text-sm text-muted-foreground">
                {getErrorDescription()}
              </p>
              {error.message && (
                <div className="p-3 bg-destructive/10 border border-destructive/20 rounded-lg">
                  <div className="text-sm font-mono text-destructive">
                    {error.message}
                  </div>
                  {error.statusCode && (
                    <Badge variant="outline" className="mt-2 text-destructive border-destructive">
                      „Ç®„É©„Éº„Ç≥„Éº„Éâ: {error.statusCode}
                    </Badge>
                  )}
                </div>
              )}
            </div>

            {error.details && (
              <details className="text-sm">
                <summary className="cursor-pointer text-muted-foreground hover:text-foreground">
                  ÊäÄË°ìÁöÑ„Å™Ë©≥Á¥∞„ÇíË°®Á§∫
                </summary>
                <div className="mt-2 p-3 bg-muted/30 rounded-lg font-mono text-xs">
                  {error.details}
                </div>
              </details>
            )}
          </CardContent>
        </Card>

        {/* Solution Steps */}
        <Card className="border-fantasy-frame shadow-soft">
          <CardHeader className="pb-3">
            <CardTitle className="flex items-center gap-2">
              <RefreshCw className="h-5 w-5 text-info" />
              Ëß£Ê±∫ÊñπÊ≥ï
            </CardTitle>
          </CardHeader>
          <CardContent>
            <ol className="space-y-2">
              {getSolutionSteps().map((step, index) => (
                <li key={index} className="flex items-center gap-3 text-sm">
                  <div className="w-6 h-6 rounded-full bg-info/20 text-info flex items-center justify-center text-xs font-semibold flex-shrink-0">
                    {index + 1}
                  </div>
                  <span className="text-muted-foreground">{step}</span>
                </li>
              ))}
            </ol>
          </CardContent>
        </Card>

        {/* Action Buttons */}
        <div className="space-y-3">
          {onRetry && (
            <Button 
              variant="fantasy" 
              size="lg" 
              className="w-full h-12"
              onClick={handleRetry}
              disabled={isRetrying}
            >
              {isRetrying ? (
                <>
                  <RefreshCw className="h-4 w-4 mr-2 animate-spin" />
                  ÂÜçË©¶Ë°å‰∏≠...
                </>
              ) : (
                <>
                  <RefreshCw className="h-4 w-4 mr-2" />
                  „ÇÇ„ÅÜ‰∏ÄÂ∫¶Ë©¶„Åô
                </>
              )}
            </Button>
          )}

          <div className="grid grid-cols-1 md:grid-cols-2 gap-3">
            {onGoBack && (
              <Button variant="outline" size="lg" onClick={onGoBack}>
                <ArrowLeft className="h-4 w-4 mr-2" />
                Ââç„ÅÆÁîªÈù¢„Å´Êàª„Çã
              </Button>
            )}
            
            {onGoHome && (
              <Button variant="outline" size="lg" onClick={onGoHome}>
                <Home className="h-4 w-4 mr-2" />
                „Éõ„Éº„É†ÁîªÈù¢„Å´Êàª„Çã
              </Button>
            )}
          </div>

          {showContactSupport && (
            <div className="text-center">
              <Button variant="ghost" size="sm" className="text-muted-foreground">
                <MessageCircle className="h-4 w-4 mr-2" />
                ÂïèÈ°å„ÅåËß£Ê±∫„Åó„Å™„ÅÑÂ†¥Âêà„ÅØ„Çµ„Éù„Éº„Éà„Å´ÈÄ£Áµ°
              </Button>
            </div>
          )}
        </div>

        {/* Network Status Indicator */}
        <div className="flex items-center justify-center gap-2 text-sm text-muted-foreground">
          {navigator.onLine ? (
            <>
              <Wifi className="h-4 w-4 text-success" />
              <span>„Ç§„É≥„Çø„Éº„Éç„ÉÉ„ÉàÊé•Á∂öOK</span>
            </>
          ) : (
            <>
              <WifiOff className="h-4 w-4 text-destructive" />
              <span>„Ç§„É≥„Çø„Éº„Éç„ÉÉ„ÉàÊé•Á∂ö„Å™„Åó</span>
            </>
          )}
        </div>
      </div>
    </div>
  );
};